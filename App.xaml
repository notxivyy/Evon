<?xml version="1.0" encoding="utf-8"?>
<Application x:Class="Evon.App" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="clr-namespace:Evon" xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes">
  <Application.Resources>
    <ResourceDictionary>
      <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
      </ResourceDictionary.MergedDictionaries>
      <SolidColorBrush x:Key="PrimaryHueLightBrush" Color="White" />
      <SolidColorBrush x:Key="PrimaryHueLightForegroundBrush" Color="Black" />
      <SolidColorBrush x:Key="PrimaryHueMidBrush" Color="#FF9700FF" />
      <SolidColorBrush x:Key="PrimaryHueMidForegroundBrush" Color="Black" />
      <SolidColorBrush x:Key="PrimaryHueDarkBrush" Color="White" />
      <SolidColorBrush x:Key="PrimaryHueDarkForegroundBrush" Color="Black" />
      <SolidColorBrush x:Key="SecondaryAccentBrush" Color="White" />
      <SolidColorBrush x:Key="SecondaryAccentForegroundBrush" Color="White" />
      <Style x:Key="WhiteCheckBox" TargetType="{x:Type CheckBox}">
        <Setter Property="FrameworkElement.FocusVisualStyle">
          <Setter.Value>
            <Style>
              <Setter Property="Control.Template">
                <Setter.Value>
                  <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2" />
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>
          </Setter.Value>
        </Setter>
        <Setter Property="Control.BorderThickness" Value="1" />
        <Setter Property="Control.VerticalContentAlignment" Value="Center" />
        <Setter Property="Control.Background" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="Control.BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="Control.Foreground" Value="{Binding (TextElement.Foreground), RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type FrameworkElement}}}" />
        <Setter Property="Validation.ErrorTemplate">
          <Setter.Value>
            <ControlTemplate />
          </Setter.Value>
        </Setter>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type CheckBox}">
              <ControlTemplate.Resources>
                <Storyboard x:Key="Click">
                  <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="InteractionEllipse">
                    <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="48" />
                  </DoubleAnimationUsingKeyFrames>
                  <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Height)" Storyboard.TargetName="InteractionEllipse">
                    <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="48" />
                  </DoubleAnimationUsingKeyFrames>
                  <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="InteractionEllipse">
                    <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-24" />
                  </DoubleAnimationUsingKeyFrames>
                  <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="InteractionEllipse">
                    <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-24" />
                  </DoubleAnimationUsingKeyFrames>
                  <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="InteractionEllipse">
                    <EasingDoubleKeyFrame KeyTime="0" Value="0.3" />
                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0" />
                  </DoubleAnimationUsingKeyFrames>
                </Storyboard>
              </ControlTemplate.Resources>
              <Grid Name="templateRoot" Background="#00FFFFFF" SnapsToDevicePixels="True">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Viewbox FlowDirection="LeftToRight" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" Height="{Binding (materialDesign:CheckBoxAssist.CheckBoxSize), RelativeSource={RelativeSource TemplatedParent}}" Width="{Binding (materialDesign:CheckBoxAssist.CheckBoxSize), RelativeSource={RelativeSource TemplatedParent}}">
                  <Canvas Height="24" Width="24">
                    <Path Name="Graphic" Data="M19,3L5,3C3.89,3,3,3.89,3,5L3,19A2,2,0,0,0,5,21L19,21A2,2,0,0,0,21,19L21,5C21,3.89,20.1,3,19,3 M19,5L19,19 5,19 5,5 19,5z" Fill="{TemplateBinding Control.Background}" />
                    <Ellipse Name="InteractionEllipse" Fill="{TemplateBinding Control.Foreground}" Height="0" IsHitTestVisible="False" Canvas.Left="12" Opacity="0" RenderTransformOrigin="0.5,0.5" Canvas.Top="12" Width="0">
                      <Ellipse.RenderTransform>
                        <TransformGroup>
                          <ScaleTransform />
                          <SkewTransform />
                          <RotateTransform />
                          <TranslateTransform />
                        </TransformGroup>
                      </Ellipse.RenderTransform>
                    </Ellipse>
                  </Canvas>
                </Viewbox>
                <ContentPresenter Name="contentPresenter" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" Content="{TemplateBinding ContentControl.Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
              </Grid>
              <ControlTemplate.Triggers>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true" />
                    <Condition Binding="{Binding (materialDesign:RippleAssist.IsDisabled), RelativeSource={RelativeSource Self}}" Value="false" />
                  </MultiDataTrigger.Conditions>
                  <MultiDataTrigger.EnterActions>
                    <BeginStoryboard>
                      <Storyboard>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="InteractionEllipse">
                          <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                          <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="48" />
                        </DoubleAnimationUsingKeyFrames>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Height)" Storyboard.TargetName="InteractionEllipse">
                          <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                          <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="48" />
                        </DoubleAnimationUsingKeyFrames>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="InteractionEllipse">
                          <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                          <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-24" />
                        </DoubleAnimationUsingKeyFrames>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="InteractionEllipse">
                          <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                          <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-24" />
                        </DoubleAnimationUsingKeyFrames>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="InteractionEllipse">
                          <EasingDoubleKeyFrame KeyTime="0" Value="0.3" />
                          <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0" />
                        </DoubleAnimationUsingKeyFrames>
                      </Storyboard>
                    </BeginStoryboard>
                  </MultiDataTrigger.EnterActions>
                </MultiDataTrigger>
                <Trigger Property="ContentControl.HasContent" Value="True">
                  <Setter Property="FrameworkElement.FocusVisualStyle">
                    <Setter.Value>
                      <Style>
                        <Setter Property="Control.Template">
                          <Setter.Value>
                            <ControlTemplate>
                              <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                          </Setter.Value>
                        </Setter>
                      </Style>
                    </Setter.Value>
                  </Setter>
                  <Setter Property="Control.Padding" Value="4,2,0,0" />
                </Trigger>
                <Trigger Property="ButtonBase.IsPressed" Value="True" />
                <Trigger Property="ToggleButton.IsChecked" Value="True">
                  <Setter TargetName="Graphic" Property="Path.Data" Value="M10,17L5,12 6.41,10.58 10,14.17 17.59,6.58 19,8 M19,3L5,3C3.89,3,3,3.89,3,5L3,19A2,2,0,0,0,5,21L19,21A2,2,0,0,0,21,19L21,5C21,3.89,20.1,3,19,3z" />
                  <Setter TargetName="Graphic" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}" Property="Shape.Fill" />
                </Trigger>
                <Trigger Property="UIElement.IsEnabled" Value="False">
                  <Setter TargetName="Graphic" Value="{DynamicResource MaterialDesignCheckBoxDisabled}" Property="Shape.Fill" />
                  <Setter Property="UIElement.Opacity" Value="0.56" />
                </Trigger>
                <Trigger Value="{x:Null}" Property="ToggleButton.IsChecked">
                  <Setter TargetName="Graphic" Property="Path.Data" Value="M6,13L6,11 18,11 18,13 M19,3L5,3C3.89,3,3,3.89,3,5L3,19A2,2,0,0,0,5,21L19,21A2,2,0,0,0,21,19L21,5C21,3.89,20.1,3,19,3z" />
                  <Setter TargetName="Graphic" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}" Property="Shape.Fill" />
                </Trigger>
                <Trigger Property="Validation.HasError" Value="True">
                  <Setter TargetName="Graphic" Value="{DynamicResource MaterialDesignValidationErrorBrush}" Property="Shape.Fill" />
                  <Setter TargetName="contentPresenter" Value="{DynamicResource MaterialDesignValidationErrorBrush}" Property="TextElement.Foreground" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="ButtonStyle1" TargetType="{x:Type Button}">
        <Setter Property="Control.Background" Value="#FF232323" />
        <Setter Property="Control.FontFamily" Value="Poppins" />
        <Setter Property="FrameworkElement.Width" Value="100" />
        <Setter Property="FrameworkElement.Height" Value="40" />
        <Setter Property="Control.Foreground" Value="#FFFFFFFF" />
        <Setter Property="Control.FontSize" Value="16" />
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Button}">
              <Border CornerRadius="3" BorderBrush="#FF282828" Background="{TemplateBinding Control.Background}" BorderThickness="0">
                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
              </Border>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Style.Triggers>
          <Trigger Property="UIElement.IsMouseOver" Value="True">
            <Trigger.EnterActions>
              <BeginStoryboard>
                <Storyboard>
                  <ColorAnimation To="#3c3c3c" Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" FillBehavior="HoldEnd" Duration="0:0:0.25" AutoReverse="False" RepeatBehavior="1x" />
                  <ColorAnimation To="#FFFFFF" Storyboard.TargetProperty="(Control.Foreground).(SolidColorBrush.Color)" FillBehavior="HoldEnd" Duration="0:0:0.25" AutoReverse="False" RepeatBehavior="1x" />
                </Storyboard>
              </BeginStoryboard>
            </Trigger.EnterActions>
            <Trigger.ExitActions>
              <BeginStoryboard>
                <Storyboard>
                  <ColorAnimation To="#323232" Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" FillBehavior="HoldEnd" Duration="0:0:0.25" AutoReverse="False" RepeatBehavior="1x" />
                  <ColorAnimation To="#FFFFFF" Storyboard.TargetProperty="(Control.Foreground).(SolidColorBrush.Color)" FillBehavior="HoldEnd" Duration="0:0:0.25" AutoReverse="False" RepeatBehavior="1x" />
                </Storyboard>
              </BeginStoryboard>
            </Trigger.ExitActions>
          </Trigger>
        </Style.Triggers>
      </Style>
      <Style x:Key="TabItemStyle1" TargetType="{x:Type TabItem}">
        <Setter Property="Control.Foreground" Value="#FFB9BBBE" />
        <Setter Property="FrameworkElement.Width" Value="74" />
        <Setter Property="FrameworkElement.Margin" Value="0,0,0,0" />
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type TabItem}">
              <StackPanel Margin="0,0,0,-4">
                <Border Name="Border" BorderThickness="0" BorderBrush="#00FFFFFF" CornerRadius="0,0,0,0" Margin="0,0">
                  <ContentPresenter Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Center" ContentSource="Header" Margin="10,2" />
                </Border>
                <Border Name="LineBorder" BorderThickness="0" BorderBrush="{TemplateBinding Control.BorderBrush}" CornerRadius="0,0,0,0" Margin="0" Height="2" Background="{TemplateBinding Control.BorderBrush}" RenderTransformOrigin="0.5,0.5">
                  <Border.RenderTransform>
                    <TransformGroup>
                      <ScaleTransform ScaleY="-1" />
                      <SkewTransform />
                      <RotateTransform />
                      <TranslateTransform />
                    </TransformGroup>
                  </Border.RenderTransform>
                </Border>
              </StackPanel>
              <ControlTemplate.Triggers>
                <Trigger Property="TabItem.IsSelected" Value="True">
                  <Setter TargetName="LineBorder" Property="UIElement.Visibility" Value="Visible" />
                </Trigger>
                <Trigger Property="TabItem.IsSelected" Value="False">
                  <Setter TargetName="LineBorder" Property="UIElement.Visibility" Value="Hidden" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <SolidColorBrush x:Key="ScrollBar.Static.Background" Color="Transparent" />
      <SolidColorBrush x:Key="ScrollBar.Pressed.Glyph" Color="#ffffff" />
      <SolidColorBrush x:Key="ScrollBar.MouseOver.Glyph" Color="#a0a0a0" />
      <SolidColorBrush x:Key="ScrollBar.Disabled.Glyph" Color="#404040" />
      <SolidColorBrush x:Key="ScrollBar.Static.Glyph" Color="#808080" />
      <SolidColorBrush x:Key="ScrollBar.MouseOver.Background" Color="#303030" />
      <SolidColorBrush x:Key="ScrollBar.Pressed.Background" Color="#404040" />
      <SolidColorBrush x:Key="ScrollBar.Disabled.Background" Color="#191919" />
      <SolidColorBrush x:Key="ScrollBar.Static.Thumb" Color="#60ffffff" />
      <SolidColorBrush x:Key="ScrollBar.MouseOver.Thumb" Color="#70ffffff" />
      <SolidColorBrush x:Key="ScrollBar.Pressed.Thumb" Color="#80ffffff" />
      <Style x:Key="ScrollBarButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
        <Setter Property="Control.VerticalContentAlignment" Value="Center" />
        <Setter Property="Control.Padding" Value="1" />
        <Setter Property="UIElement.Focusable" Value="False" />
        <Setter Property="Control.IsTabStop" Value="False" />
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type RepeatButton}">
              <Border Name="border" SnapsToDevicePixels="True" Background="{StaticResource ScrollBar.Static.Background}">
                <ContentPresenter Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="True">
                  <Setter TargetName="border" Value="{StaticResource ScrollBar.MouseOver.Background}" Property="Border.Background" />
                </Trigger>
                <Trigger Property="ButtonBase.IsPressed" Value="True">
                  <Setter TargetName="border" Value="{StaticResource ScrollBar.Pressed.Background}" Property="Border.Background" />
                </Trigger>
                <Trigger Property="UIElement.IsEnabled" Value="False">
                  <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.56" />
                  <Setter TargetName="border" Value="{StaticResource ScrollBar.Disabled.Background}" Property="Border.Background" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
        <Setter Property="Control.Background" Value="#00FFFFFF" />
        <Setter Property="UIElement.Focusable" Value="False" />
        <Setter Property="Control.IsTabStop" Value="False" />
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type RepeatButton}">
              <Rectangle Fill="{TemplateBinding Control.Background}" Height="{TemplateBinding FrameworkElement.Height}" Width="{TemplateBinding FrameworkElement.Width}" />
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="ScrollBarThumbVertical" TargetType="{x:Type Thumb}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
        <Setter Property="Control.IsTabStop" Value="False" />
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Thumb}">
              <Border Name="rectangle" CornerRadius="3" Height="{TemplateBinding FrameworkElement.Height}" SnapsToDevicePixels="True" Width="{TemplateBinding FrameworkElement.Width}" Background="{StaticResource ScrollBar.Static.Thumb}" />
              <ControlTemplate.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="True">
                  <Setter TargetName="rectangle" Value="{StaticResource ScrollBar.MouseOver.Thumb}" Property="Border.Background" />
                </Trigger>
                <Trigger Property="Thumb.IsDragging" Value="True">
                  <Setter TargetName="rectangle" Value="{StaticResource ScrollBar.Pressed.Thumb}" Property="Border.Background" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="ScrollBarThumbHorizontal" TargetType="{x:Type Thumb}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
        <Setter Property="Control.IsTabStop" Value="False" />
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Thumb}">
              <Border Name="rectangle" CornerRadius="3" Height="{TemplateBinding FrameworkElement.Height}" SnapsToDevicePixels="True" Width="{TemplateBinding FrameworkElement.Width}" Background="{StaticResource ScrollBar.Static.Thumb}" />
              <ControlTemplate.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="True">
                  <Setter TargetName="rectangle" Value="{StaticResource ScrollBar.MouseOver.Thumb}" Property="Border.Background" />
                </Trigger>
                <Trigger Property="Thumb.IsDragging" Value="True">
                  <Setter TargetName="rectangle" Value="{StaticResource ScrollBar.Pressed.Thumb}" Property="Border.Background" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Control.Background" Value="{StaticResource ScrollBar.Static.Background}" />
        <Setter Property="Control.Foreground" Value="{DynamicResource SystemColors.ControlTextBrushKey}" />
        <Setter Property="FrameworkElement.Width" Value="8" />
        <Setter Property="FrameworkElement.MinWidth" Value="8" />
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ScrollBar}">
              <Grid Name="Bg" SnapsToDevicePixels="True">
                <Grid.RowDefinitions>
                  <RowDefinition Height="0.00001*" />
                </Grid.RowDefinitions>
                <Border Background="{TemplateBinding Control.Background}" Grid.Row="0" />
                <Track Name="PART_Track" IsDirectionReversed="True" IsEnabled="{TemplateBinding UIElement.IsMouseOver}" Grid.Row="0">
                  <Track.DecreaseRepeatButton>
                    <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource RepeatButtonTransparent}" />
                  </Track.DecreaseRepeatButton>
                  <Track.IncreaseRepeatButton>
                    <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource RepeatButtonTransparent}" />
                  </Track.IncreaseRepeatButton>
                  <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumbVertical}" />
                  </Track.Thumb>
                </Track>
              </Grid>
              <ControlTemplate.Triggers>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" Value="true" />
                    <Condition Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" Value="true" />
                  </MultiDataTrigger.Conditions>
                </MultiDataTrigger>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" Value="true" />
                    <Condition Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" Value="true" />
                  </MultiDataTrigger.Conditions>
                </MultiDataTrigger>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" Value="true" />
                    <Condition Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" Value="false" />
                  </MultiDataTrigger.Conditions>
                </MultiDataTrigger>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" Value="true" />
                    <Condition Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" Value="false" />
                  </MultiDataTrigger.Conditions>
                </MultiDataTrigger>
                <Trigger Property="UIElement.IsEnabled" Value="False" />
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Style.Triggers>
          <Trigger Property="ScrollBar.Orientation" Value="Horizontal">
            <Setter Property="FrameworkElement.Width" Value="Auto" />
            <Setter Property="FrameworkElement.MinWidth" Value="0" />
            <Setter Property="FrameworkElement.Height" Value="8" />
            <Setter Property="FrameworkElement.MinHeight" Value="8" />
            <Setter Property="Control.Template">
              <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                  <Grid Name="Bg" SnapsToDevicePixels="True">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="0.00001*" />
                    </Grid.ColumnDefinitions>
                    <Border Background="{TemplateBinding Control.Background}" Grid.Column="0" />
                    <Track Name="PART_Track" Grid.Column="0" IsEnabled="{TemplateBinding UIElement.IsMouseOver}">
                      <Track.DecreaseRepeatButton>
                        <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource RepeatButtonTransparent}" />
                      </Track.DecreaseRepeatButton>
                      <Track.IncreaseRepeatButton>
                        <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource RepeatButtonTransparent}" />
                      </Track.IncreaseRepeatButton>
                      <Track.Thumb>
                        <Thumb Style="{StaticResource ScrollBarThumbHorizontal}" />
                      </Track.Thumb>
                    </Track>
                  </Grid>
                  <ControlTemplate.Triggers>
                    <MultiDataTrigger>
                      <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" Value="true" />
                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" Value="true" />
                      </MultiDataTrigger.Conditions>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                      <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" Value="true" />
                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" Value="true" />
                      </MultiDataTrigger.Conditions>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                      <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" Value="true" />
                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" Value="false" />
                      </MultiDataTrigger.Conditions>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                      <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" Value="true" />
                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" Value="false" />
                      </MultiDataTrigger.Conditions>
                    </MultiDataTrigger>
                    <Trigger Property="UIElement.IsEnabled" Value="False" />
                  </ControlTemplate.Triggers>
                </ControlTemplate>
              </Setter.Value>
            </Setter>
          </Trigger>
        </Style.Triggers>
      </Style>
      <Style x:Key="{x:Type ScrollViewer}" TargetType="{x:Type ScrollViewer}">
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ScrollViewer}">
              <Grid Name="Grid" Background="{TemplateBinding Control.Background}">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Rectangle Name="Corner" Grid.Column="1" Grid.Row="1" Fill="{StaticResource ScrollBar.Static.Background}" />
                <ScrollContentPresenter Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" Content="{TemplateBinding ContentControl.Content}" Grid.Column="0" Margin="{TemplateBinding Control.Padding}" Grid.Row="0" />
                <ScrollBar Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}" ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                <ScrollBar Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}" ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
              </Grid>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="placeHolder" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type TextBox}">
              <Grid>
                <TextBox Name="textSource" Foreground="#FFFFFFFF" Background="#00FFFFFF" Panel.ZIndex="2" BorderThickness="0" Padding="0,4" CaretBrush="{TemplateBinding TextBoxBase.CaretBrush}" Text="{Binding Text, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}">
                  <TextBox.Resources>
                    <Style TargetType="{x:Type Border}" />
                  </TextBox.Resources>
                </TextBox>
                <TextBox Text="{TemplateBinding FrameworkElement.Tag}" Background="{TemplateBinding Control.Background}" HorizontalContentAlignment="Left" VerticalContentAlignment="Center" BorderThickness="0">
                  <TextBox.Resources>
                    <Style TargetType="{x:Type Border}" />
                  </TextBox.Resources>
                  <TextBox.Style>
                    <Style TargetType="{x:Type TextBox}">
                      <Setter Property="Control.Foreground" Value="#00FFFFFF" />
                      <Style.Triggers>
                        <DataTrigger>
                          <DataTrigger.Binding>
                            <Binding>Text<Binding.Source><Reference>textSource</Reference></Binding.Source></Binding>
                          </DataTrigger.Binding>
                          <Setter Property="Control.Foreground" Value="#FFD3D3D3" />
                        </DataTrigger>
                      </Style.Triggers>
                    </Style>
                  </TextBox.Style>
                </TextBox>
              </Grid>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <SolidColorBrush x:Key="Button.Static.Background" Color="#00ffffff" />
      <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#80969696" />
      <SolidColorBrush x:Key="Close.MouseOver.Background" Color="#90e62345" />
      <SolidColorBrush x:Key="Button.Pressed.Background" Color="#80505050" />
      <SolidColorBrush x:Key="Button.Disabled.Background" Color="#ff191919" />
      <SolidColorBrush x:Key="TabItem.MouseOver.Background" Color="#20ffffff" />
      <SolidColorBrush x:Key="TabItem.Selected.Background" Color="#400F0F0F" />
      <SolidColorBrush x:Key="ListBox.Static.Background" Color="#191919" />
      <Style x:Key="CloseButton" TargetType="{x:Type Button}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Control.Background" Value="{StaticResource Button.Static.Background}" />
        <Setter Property="Control.Foreground" Value="#FFFFFFFF" />
        <Setter Property="Control.BorderThickness" Value="1" />
        <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
        <Setter Property="Control.VerticalContentAlignment" Value="Center" />
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Button}">
              <Border Name="border" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True" CornerRadius="2">
                <ContentPresenter Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="True">
                  <Setter TargetName="border" Value="{StaticResource Close.MouseOver.Background}" Property="Border.Background" />
                </Trigger>
                <Trigger Property="ButtonBase.IsPressed" Value="True">
                  <Setter TargetName="border" Value="{StaticResource Close.MouseOver.Background}" Property="Border.Background" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="RoundButton" TargetType="{x:Type Button}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Control.Background" Value="{StaticResource Button.Static.Background}" />
        <Setter Property="Control.Foreground" Value="#FFFFFFFF" />
        <Setter Property="Control.BorderThickness" Value="1" />
        <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
        <Setter Property="Control.VerticalContentAlignment" Value="Center" />
        <Setter Property="Control.Padding" Value="6 1" />
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Button}">
              <Border Name="border" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True" CornerRadius="5">
                <ContentPresenter Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="True">
                  <Setter TargetName="border" Value="{StaticResource Button.MouseOver.Background}" Property="Border.Background" />
                </Trigger>
                <Trigger Property="ButtonBase.IsPressed" Value="True">
                  <Setter TargetName="border" Value="{StaticResource Button.Pressed.Background}" Property="Border.Background" />
                </Trigger>
                <Trigger Property="UIElement.IsEnabled" Value="False">
                  <Setter TargetName="border" Value="{StaticResource Button.Disabled.Background}" Property="Border.Background" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="Tabs" TargetType="{x:Type TabControl}">
        <Setter Property="Control.Padding" Value="2" />
        <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
        <Setter Property="Control.VerticalContentAlignment" Value="Center" />
        <Setter Property="Control.Background" Value="{StaticResource TabItem.Selected.Background}" />
        <Setter Property="Control.BorderThickness" Value="0" />
        <Setter Property="Control.Foreground" Value="{DynamicResource SystemColors.ControlTextBrushKey}" />
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type TabControl}">
              <Grid Name="templateRoot" ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Name="ColumnDefinition0" />
                  <ColumnDefinition Name="ColumnDefinition1" Width="0" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition Name="RowDefinition0" Height="Auto" />
                  <RowDefinition Name="RowDefinition1" Height="*" />
                </Grid.RowDefinitions>
                <ScrollViewer Name="TabScrollViewer" ScrollViewer.VerticalScrollBarVisibility="Disabled" Background="#00FFFFFF" ScrollViewer.HorizontalScrollBarVisibility="Auto" ClipToBounds="True">
                  <StackPanel Orientation="Horizontal">
                    <TabPanel Name="headerPanel" Background="#00FFFFFF" IsItemsHost="True" KeyboardNavigation.TabIndex="1" ZIndex="1" Margin="0 2 0 0" />
                    <Button Name="AddTabButton" Width="15" Height="15" Margin="4" Padding="0" Style="{StaticResource RoundButton}">
                      <Grid>
                        <Path Stroke="#FFB9BBBE" StrokeThickness="1" Data="M0,4.5L9,4.5" />
                        <Path Stroke="#FFB9BBBE" StrokeThickness="1" Data="M4.5,0L4.5,9" />
                      </Grid>
                    </Button>
                  </StackPanel>
                </ScrollViewer>
                <Border Name="contentPanel" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                  <ContentPresenter Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="0,0,0,0" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                </Border>
              </Grid>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="Tab" TargetType="{x:Type TabItem}">
        <Setter Property="Control.FontFamily" Value="/Evon;component/Graphics/Fonts/#Poppins Light" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Control.Foreground" Value="#FFFFFFFF" />
        <Setter Property="Control.Background" Value="#00FFFFFF" />
        <Setter Property="FrameworkElement.Margin" Value="1" />
        <Setter Property="Control.Padding" Value="8,6,8,6" />
        <Setter Property="Control.HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Control.VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type TabItem}">
              <Grid Name="templateRoot" SnapsToDevicePixels="True" Height="32" Background="{x:Null}">
                <Border Name="mainBorder" BorderBrush="#FF141414" BorderThickness="0,0,0,0" Background="#FF141414" Margin="0,0,2,3" CornerRadius="5,5,0,0" />
                <Border Name="BarBorder" BorderBrush="#FF1E1E1E" BorderThickness="0,0,0,0" Background="#FF9700FF" Margin="0,27,2,3" CornerRadius="0" />
                <StackPanel Orientation="Horizontal" Margin="0" RenderTransformOrigin="0.5,0.5">
                  <ContentPresenter Name="contentPresenter" ContentSource="Header" Focusable="False" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Margin="5,6,10,10" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
                  <Button Name="CloseButton" Margin="10,8,8,8" Padding="0" Height="14" Width="14" FontSize="8" FontFamily="Segoe MDL2 Assets" Content="" Style="{StaticResource RoundButton}" />
                </StackPanel>
              </Grid>
              <ControlTemplate.Triggers>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false" />
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top" />
                  </MultiDataTrigger.Conditions>
                  <Setter TargetName="mainBorder" Property="Border.Background" Value="#FF232323" />
                  <Setter TargetName="BarBorder" Property="Border.Background" Value="#FF2D2D2D" />
                </MultiDataTrigger>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false" />
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false" />
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top" />
                  </MultiDataTrigger.Conditions>
                  <Setter TargetName="mainBorder" Property="Border.Background" Value="#FF141414" />
                  <Setter TargetName="BarBorder" Property="Border.Background" Value="#FF1E1E1E" />
                </MultiDataTrigger>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top" />
                  </MultiDataTrigger.Conditions>
                  <Setter Property="Panel.ZIndex" Value="1" />
                  <Setter TargetName="mainBorder" Property="Border.Background" Value="#FF1E1E1E" />
                  <Setter TargetName="BarBorder" Property="Border.Background" Value="#FF9700FF" />
                </MultiDataTrigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="ModdedTabButton" TargetType="{x:Type Button}">
        <Setter Property="Control.Background" Value="#FFD82242" />
        <Setter Property="Control.Foreground" Value="#FFFFFFFF" />
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Button}">
              <Border CornerRadius="3 3 0 0" Background="{TemplateBinding Control.Background}" BorderThickness="1">
                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
              </Border>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Style.Triggers>
          <Trigger Property="UIElement.IsMouseOver" Value="True">
            <Trigger.EnterActions>
              <BeginStoryboard>
                <Storyboard>
                  <ColorAnimation To="#404040" Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" FillBehavior="HoldEnd" Duration="0:0:0.25" AutoReverse="False" RepeatBehavior="1x" />
                </Storyboard>
              </BeginStoryboard>
            </Trigger.EnterActions>
            <Trigger.ExitActions>
              <BeginStoryboard>
                <Storyboard>
                  <ColorAnimation Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" FillBehavior="HoldEnd" Duration="0:0:0.25" AutoReverse="False" RepeatBehavior="1x" />
                </Storyboard>
              </BeginStoryboard>
            </Trigger.ExitActions>
          </Trigger>
        </Style.Triggers>
      </Style>
      <Style x:Key="InvisibleTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="Control.Background" Value="#00FFFFFF" />
        <Setter Property="Control.BorderBrush" Value="#00FFFFFF" />
        <Setter Property="FrameworkElement.ContextMenu" Value="{x:Null}" />
        <Setter Property="TextBoxBase.CaretBrush" Value="#FFFFFFFF" />
        <Setter Property="Control.Foreground" Value="#FFFFFFFF" />
        <Setter Property="Control.BorderThickness" Value="0" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="Control.HorizontalContentAlignment" Value="Left" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="UIElement.AllowDrop" Value="True" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Control.Padding" Value="0" />
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type TextBox}">
              <Border Name="border" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True">
                <ScrollViewer Name="PART_ContentHost" Focusable="False" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Hidden" />
              </Border>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Style.Triggers>
          <MultiTrigger>
            <MultiTrigger.Conditions>
              <Condition Property="TextBoxBase.IsInactiveSelectionHighlightEnabled" Value="True" />
              <Condition Property="TextBoxBase.IsSelectionActive" Value="False" />
            </MultiTrigger.Conditions>
            <Setter Property="TextBoxBase.SelectionBrush" Value="{DynamicResource SystemColors.InactiveSelectionHighlightBrushKey}" />
          </MultiTrigger>
        </Style.Triggers>
      </Style>
    </ResourceDictionary>
  </Application.Resources>
</Application>